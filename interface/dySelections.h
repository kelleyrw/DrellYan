#ifndef DYSELECTIONS_H
#define DYSELECTIONS_H

namespace dy 
{
    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 lepton impact parameters 
    // uses CTF track for muons and GSF tracks for elections
    // calc w.r.t first good vertex
    ////////////////////////////////////////////////////////////////////////////////////////////     
    double leptonD0(const int lep_id, const int lep_idx);
    double leptonDz(const int lep_id, const int lep_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 good lepton (passes ID)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isGoodLepton(const int lep_id, const int lep_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 isolated lepton
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isIsolatedLepton(const int lep_id, const int lep_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 lepton isolation value
    ////////////////////////////////////////////////////////////////////////////////////////////     
    double leptonIsolation(const int lep_id, const int lep_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 selected lepton (passes ID and isolation)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isSelectedLepton(const int lep_id, const int lep_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 effective area 
    ////////////////////////////////////////////////////////////////////////////////////////////     
    double EffectiveArea03(const int lep_id, const int lep_idx);
    double EffectiveArea04(const int lep_id, const int lep_idx);

    ///////////////////////////////////////////////////////////////////////////////////////////
    // 2012 calculate PF-based isolation for electrons with rho*Aeff correction
    ///////////////////////////////////////////////////////////////////////////////////////////
    double electronIsolationPF2012_cone03(const int el_idx);  // uses ∆R < 0.3
    double electronIsolationPF2012_cone04(const int el_idx);  // uses ∆R < 0.4
    double electronIsolationPF2012(const int el_idx);         // wrapper ∆R < 0.3 version --> used in the analysis

    ///////////////////////////////////////////////////////////////////////////////////////////
    // calculate PF-based isolation for muon with Delta-Beta correction using cone size 04
    ///////////////////////////////////////////////////////////////////////////////////////////
    double muonIsoValuePF2012(const int mu_idx);

    ///////////////////////////////////////////////////////////////////////////////////////////
    // 2012 passes dilepton trigger
    ///////////////////////////////////////////////////////////////////////////////////////////
    bool passesTrigger(const int flavor_type);

    ///////////////////////////////////////////////////////////////////////////////////////////
    // checks whether the leptons of a given
    // hypothesis come from the same good vertex
    // by checking if both leptons are within dz
    // of dz_cut (default 1.0 cm) of the same PV
    ///////////////////////////////////////////////////////////////////////////////////////////
    bool hypsFromFirstGoodVertex(const int hyp_idx, const double dz_cut = 1.0/*cm*/);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 selected numerator hypothesis (passes ID and isolation)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isSelectedHypothesis(const int hyp_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // disambiguate between two passing hypotheses 
    ////////////////////////////////////////////////////////////////////////////////////////////     
    int ChooseBetterHypothesis(const int hyp1_idx, const int hyp2_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // disambiguate between two passing hypotheses 
    // 1 mumu; 2 emu; 3 ee; -1 other;
    ////////////////////////////////////////////////////////////////////////////////////////////     
    int GenDileptonType();

} // namespace dy 

#endif // DYSELECTIONS_H

