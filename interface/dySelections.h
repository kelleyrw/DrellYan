#ifndef DYSELECTIONS_H
#define DYSELECTIONS_H

namespace dy 
{
    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 lepton impact parameters 
    // uses CTF track for muons and GSF tracks for elections
    // calc w.r.t first good vertex
    ////////////////////////////////////////////////////////////////////////////////////////////     
    float leptonD0(const int id, const int idx);
    float leptonDz(const int id, const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 good lepton (passes ID)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isGoodLepton(const int id, const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 isolated lepton
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isIsolatedLepton(const int id, const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 lepton isolation value
    ////////////////////////////////////////////////////////////////////////////////////////////     
    double leptonIsolation(const int id, const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 effective area 
    ////////////////////////////////////////////////////////////////////////////////////////////     
    float EffectiveArea03(const int id, const int idx);
    float EffectiveArea04(const int id, const int idx);

    ///////////////////////////////////////////////////////////////////////////////////////////
    // 2012 calculate PF-based isolation for electrons with rho*Aeff correction
    ///////////////////////////////////////////////////////////////////////////////////////////
    float electronIsolationPF2012_cone03(const int idx);  // uses ∆R < 0.3
    float electronIsolationPF2012_cone04(const int idx);  // uses ∆R < 0.4
    float electronIsolationPF2012(const int idx);         // wrapper ∆R < 0.3 version --> used in the analysis

    ///////////////////////////////////////////////////////////////////////////////////////////
    // calculate PF-based isolation for muon with Delta-Beta correction using cone size 04
    ///////////////////////////////////////////////////////////////////////////////////////////
    float muonIsoValuePF2012(const unsigned int idx);

    ///////////////////////////////////////////////////////////////////////////////////////////
    // 2012 passes dilepton trigger
    ///////////////////////////////////////////////////////////////////////////////////////////
    bool passesTriggerSingleLep(const int flavor_type);    // single lepton
    bool passesTriggerDoubleLep(const int flavor_type); // double lepton
    bool passesTrigger(const int flavor_type);      // wrapper uses dilepton triggers

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 selected lepton (passes ID and isolation)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isSelectedLepton(const int id, const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // 2012 selected numerator hypothesis (passes ID and isolation)
    ////////////////////////////////////////////////////////////////////////////////////////////     
    bool isSelectedHypothesis(const int idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // disambiguate between two passing hypotheses 
    ////////////////////////////////////////////////////////////////////////////////////////////     
    int ChooseBetterHypothesis(const int hyp1_idx, const int hyp2_idx);

    ////////////////////////////////////////////////////////////////////////////////////////////     
    // disambiguate between two passing hypotheses 
    // 1 mumu; 2 emu; 3 ee; -1 other;
    ////////////////////////////////////////////////////////////////////////////////////////////     
    int GenDileptonType();

} // namespace dy 

#endif // DYSELECTIONS_H

